//---------------------------------------------------------------------------
9/24/13

Routemanager (and log system) uses the startup function to walk a hierarchy of objects and set parenting hierarchy info; this is done so that we can track the hierarchy no matter what order the objects are created.
Is there a better way to do this?
//---------------------------------------------------------------------------








//---------------------------------------------------------------------------
9/27/13
we have objects called MewloPackages -- might be too confusing with python term of "packages"
can we rename it to something similar like "packs"?
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
9/27/13
i'd like to standardize all startup and shutdown functions to take an eventlist and report issues.
and create debug log entries with startup reports.

alternatively, rethink how we are treating these startup events specially, and ask if we really want to do that, or if we shouldnt let them use normal logging for errors
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
10/1/13
if you look in misc.py you will see some functions that return Events for exceptions
and some functions that raise exceptions.

we need a systematic explanation of when/why some functions catch exceptions and return them as events vs those which pass exceptions up the chain
and a systematic documentation to make this clear for any given function at a glance.
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
10/1/13
take a look at a file like package.py
note that its impossible to distinguish between api functions meant to be called by someone, vs helper functions used by these.
move all "internal" functions to _ prefixes?
by internal i mean functions not meant to be called from outside the class
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
10/3/13
reduce use of the "from x import y" stuff, as it makes circular dependencies
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
10/8/13
See mglobals for some SERIOUSLY evil python ugliness and problematic thing going on with python reloading modules and wiping out class/module state.
//---------------------------------------------------------------------------
