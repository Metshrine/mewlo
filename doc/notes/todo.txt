



//---------------------------------------------------------------------------
10/11/13
Write a more general purpose template/alias replacer, with support not just for global alias list,
 but local alias dictionaries, as well as the use of fallback defaults.
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
10/16/13
simplify mewlosite -- move some stuff to helpers
//---------------------------------------------------------------------------







//---------------------------------------------------------------------------
10/17/13
add LogFormat and LogModifier class
they would do things like format timestamp as readable text when writing to text file
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
10/18/13
Use pkg_resources to resolve filenames referring to controller functions, like pyramid does
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
10/18/13
note that we may need request information when generating urls, to know whether to use http or https, etc.
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
10/18/13
take another look at pyramids dual/"traversal" method of serving files.
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
10/22/13
write a dedicated ResponseContext class
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
10/23/13
decide how to handle url ? args
//---------------------------------------------------------------------------








//---------------------------------------------------------------------------
1/17/14
Make summary flowcharts/writeups of mewlo startup and url processing workflow steps involved.
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
1/17/14
the signal dispatcher startup() code is failing to call startup() for the registered receivers+senders because they are created AFTER startup
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
1/17/14
Log requests and request errors in log
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
1/17/14
Implement the more efficient node counter id and property caching (see mnav.py)
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
1/17/14
Adopt a naming convention for private vs public functions (see callables.py for example)
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
1/17/14
We register a python hook to catch python log events.  This works fine,
EXCEPT that such events happen without context -- i.e. without us knowing which MewloSite they belong to (if multiple sites are running)
We need to check what happens with regard to catching python logging hooks (see mlogger.py) when we have multiple sites running,
 and how we handle this.  This may require use of mglobals.mewlosite().  The idea would be to have either only one hook, and route it to log manager of the site identified by global as currently running, or let each site have their own hook and ignore when its not about our global site.
We also need to check if we let go of python hooks on logger shutdown.
#
NOTE: Looking at how our python hook is done (see mdbmanager_sqlalchemy.py, it *MAY* be that there is nothing to worry about, that we are hooking a particular instance of some object (e.g. sql alchemy instance) and so there is no overlap.
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
1/17/14
There are several places where we are creating some "clever" database models/table dynamically on the fly.
I'm not sure this is really a wise thing to do. For example see mdbmodel_fieldset.py
You can see this also with creating dynamic database-backed settings classes.
It might be better to explicitly create class definitions for these kinds of things.
Doing so explicitly would make it easier for us to customize, derive, and name these classes and tables, but mostly because it would make it easier to read the code and comport with our clarity-first guidelines.
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
1/17/14
can we move all database model class-based data to a helper object? or will sqlalchemy not let us
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
1/30/14
decide on a consistent approach to using model class method to do work vs using a helper class.
for example session uses session helper/manager
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
1/30/14
we are not properly checking for errors on database saves
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
1/30/14
wrap all non-core-python modules in wrappers
(mail sending, etc.)
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
1/30/14
Establish formalism for calling things helpers vs managers, and use a special name for MewloDbModel helper/manager classes.
Establish guidelines for these.

My suggestion:
1. Don't use class functions, instead use database object managers.
2. Use the term DbManager for database object managers, and Managers for others.
3. Let the DbManagers do all creation of new MewloDbModel objects and finds, etc. (instead of class functions on the objects themselves.
4. Use an automated process of registering, startup, and shutdown of all site managers, instead of manually, by having a config section that simply lists all manager classes in order.
5. All managers should be accesible via site.manager['managername']
6. In this way could use drop in replacements of ANY model class by simply substituting a new manager, because the model classes will never be explicitly referred to (always done via manager which can be replaced).
7. This should let us dynamically create alternate model classes that use dif table names for dif sites, allowing us to run multiple sites from one sitemanager while keeping sqlalchemy happy.
8. By avoiding dependence on class entities acting like objects, it may be easier to port to other languages that do not support such things.
9. Use the term 'helper' to refer to files and classes that are NOT registered with mewlo, and are used only locally.
10. The Mewlo "REGISTRY" also keeps track of registered components so they can be looked up and referenced; there is overlap between this and our concept of managers; resolve.
11. Places where we need to iterate managers/helpers: init, startup, shutdown, dumps
12. The msite.py module needs the real cleaning in this regard
13. All managers/helpers should take argument 'flag_debugmost' at construction, then mewlosite,eventlist at startup, and nothing at shutdown

See the managers.rst help document for more justification
//---------------------------------------------------------------------------







//---------------------------------------------------------------------------
1/30/14
pathprefix for route groups is not going to obey recursive relative paths
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
1/30/14
in mdbmanager.py we have two functions which do not belong here:
create_early_database_classes()
create_core_database_classes()

these functions are needed to inform sqlalchemy to create the models and tables, etc.

find a way to get that code into the managers classes

also see mdbsettings as well for some awkward use of registry to get the database object model for use with settings/ i think it may make more sense 
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
1/30/14
the use of 
        self.dbmanager.register_modelclass(self, self.logclass)
        #self.dbmanager.create_tableandmapper_foroneclass(self.logclass)
				dbmanager.create_tableandmapper_forallmodelclasses()
is really kludgey and messy; has to be a better way to ask all managers to register their database classes en masse before starting up.

add a register_databaseclasses() function to managers
//---------------------------------------------------------------------------
