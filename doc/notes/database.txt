Mewlo Database / Model System
=============================

Goals:

	* As little "magic" as possible
	* Use object-oriented interface (Active Record) as much as possible in cases where it won't effect speed
	* But don't try to get too convoluted; when speed is important use lower-level db access.
	* Support multiple databases in same web application (i.e. different models saved to different databases).
	* Built-in support for profiling database access times, and detecting slow/expensive/memory-intensive db calls.
	* Assume we will move mewlo to a non-python language eventually, and code accordingly.
	* Abstract and hide the underlying database engine as much as possible so that db stuff is centralized someplace.
	* We still don't know if we want database engine type we want to use.

Database Engine Thoughts:

	* MongoDb is a nice non-traditional (non-rdbms) nosql oop database, which seems pretty mature and performance focused.
	* MongoDb has a medium-level api interface that we could use directly and would be easy to migrate if we moved languages.
	* SqlAlchemy provides a very nice high-level api for using sql-based database engines.  Very featureful but moving away from python would require complete rewrite.


The Primary Guiding Principle of our Database/Model System is: DRY (Don't Repeat Yourself):

	* There should be one clear place, in code, in the model class, where the complete information for model fields is specified.
	* This specification of fields should completely specify the database table, enough to generate a Create statement for the database, including indices.
	* This specification comprehensive information about how the fields should be presented in user interfaces.
	* This includes validation and display widget information both for gathering these fields on a form (labels, widget types, validation, help hints, etc.).
	* This also included widget hints for presenting admin tabular views of data, searching for it, etc.
	* It should include additional information that will allow us to validate the entire table at any point (e.g. it might specify constraints, etc.)
	* This information should be engine-neutral to the extent possible.